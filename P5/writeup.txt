Writeup Guidelines:

– What you changed from the template and why, especially related to your selection strategies,
fitness functions, crossover and mutation operators, etc.
– Something about each of your two favorite levels: Why do you like them? How many generations
did it take and how many seconds to generate these levels?

1. 
Selection Strategy:
Eletist selection - Pick random number of maps from 1% to 25% of the original population, choose the ones with the best fitness to 
become the parents for the next generation.

Uniform crossover - Takes two parents, makes two copies of them. We have a new map P filled with random numbers from 0-1. So if the number is less than .5 
we swap with one parent and if its above .5 we swap with the other. 

Mutation - Randomly pick if its gonna mutate a random set of columns, rows, or positions. After it picks, its gonna iterate through it
and if its an option block theres a 25% chance it changes to a different option block and a 75% chance it shifts over in a random direction. 

Chance that it won't mutate: 10% (aka if a random number from 0-1 is less than 0.1)

2.


Writeup Part 2
- Switch the encoding to Individual_DE and explore its outputs; write down an explanation of its
crossover and mutation functions, with a diagram if possible.

Selection Strategy:
DE Single point crossover: generate_children picks a singular point where both genomes swap. 

DE Mutation: The chance of the mutation is very unlikely, it will only mutate if a random number btwn 0 to 1 is less then 0.1 so around 10% mutation chance. 
After that (if it mutates) it chooses a random number between 0 to (length of genome minus 1). Choosing a specific part of the genome.
It stores certain types of patterns, ie. where enemies, stairs, pipes, etc. will be placed 
Genome is an array of design patterns.
Depending on which design patterns is chosen it shifts where the pattern will be placed respectively to where it already was.
ie. a the coin design pattern will change the x,y position or for stairs and pipes the height will be changed, and for platform it will also mutate 
how wide it is and x,y position it can also change what blocks it is made out of. 




Remember to do this:
Improve the fitness function and mutation operator (and potentially crossover) in Individual_DE.
It’s OK if it’s different from the Grid version; you may want to make assumptions ab